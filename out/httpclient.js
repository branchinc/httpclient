// Generated by CoffeeScript 1.6.3
(function() {
  var BlackholeStatsClient, HTTP, HttpClient, Q;

  Q = require("q");

  Q.longStackSupport = true;

  HTTP = require("q-io/http");

  BlackholeStatsClient = (function() {
    function BlackholeStatsClient() {}

    BlackholeStatsClient.prototype.incr = function() {};

    BlackholeStatsClient.prototype.time = function(name, func) {
      return func();
    };

    return BlackholeStatsClient;

  })();

  HttpClient = (function() {
    var BadResponse;

    BadResponse = (function() {
      function BadResponse(host, path, statusCode) {
        this.message = "Bad response from " + host + path + " (" + statusCode + ")";
        this.name = "HttpBadResponse";
      }

      return BadResponse;

    })();

    function HttpClient(options) {
      this.options = options;
      this.hosts = this.options.hosts;
      this.statClient = this.options.statClient || new BlackholeStatsClient();
      this.n = 0;
      this.hostsLength = this.hosts.length;
    }

    HttpClient.prototype.request = function(method, path) {
      var host, requestParams,
        _this = this;
      host = this.hosts[this.nextIndex()];
      this.statClient.incr("httpClient.requests~total," + host + "," + path);
      requestParams = {
        url: host + path,
        method: method
      };
      return this.statClient.time("httpClient.requestTime~total," + host, function() {
        return HTTP.request(requestParams).then(function(response) {
          if (response.status === 200) {
            _this.statClient.incr("httpClient.success~total," + host + "," + host + path);
            return response.body.read().then(function(body) {
              var strResponse;
              strResponse = body.toString("utf-8");
              return JSON.parse(strResponse);
            });
          } else {
            _this.statClient.incr("httpClient.error~total," + host + "," + host + path);
            throw new BadResponse(host, path, response.status);
          }
        });
      });
    };

    HttpClient.prototype.get = function(path) {
      return this.request("GET", path);
    };

    HttpClient.prototype.nextIndex = function() {
      this.n = (this.n + 1) % this.hostsLength;
      return this.n;
    };

    return HttpClient;

  })();

  module.exports = HttpClient;

}).call(this);
