// Generated by CoffeeScript 1.6.3
(function() {
  var BlackholeStatsClient, HttpClient, Q, request;

  Q = require("q");

  Q.longStackSupport = true;

  request = require('request');

  BlackholeStatsClient = (function() {
    function BlackholeStatsClient() {}

    BlackholeStatsClient.prototype.incr = function() {};

    BlackholeStatsClient.prototype.time = function(name, func) {
      return func();
    };

    return BlackholeStatsClient;

  })();

  HttpClient = (function() {
    var BadResponse;

    BadResponse = (function() {
      function BadResponse(host, path, statusCode) {
        this.message = "Bad response from " + host + path + " (" + statusCode + ")";
        this.name = "HTTPBadResponse";
      }

      return BadResponse;

    })();

    function HttpClient(options) {
      this.options = options;
      this.hosts = this.options.hosts;
      this.statClient = this.options.statClient || new BlackholeStatsClient();
      this.n = 0;
      this.hostsLength = this.hosts.length;
    }

    HttpClient.prototype.request = function(method, path, query, body) {
      var deferred, host, requestParams,
        _this = this;
      host = this.hosts[this.nextIndex()];
      this.statClient.incr("httpClient.requests~total," + host + "," + path);
      requestParams = {
        url: host + path,
        method: method,
        json: body,
        qs: query
      };
      deferred = Q.defer();
      request(requestParams, function(error, response, body) {
        if (error) {
          _this.statClient.incr("httpClient.error~total," + host + "," + host + path);
          return deferred.reject(new BadResponse(host, path, response.statusCode));
        } else {
          _this.statClient.incr("httpClient.success~total," + host + "," + host + path);
          return deferred.resolve({
            response: response,
            body: JSON.parse(body)
          });
        }
      });
      return this.statClient.time("httpClient.requestTime~total," + host, deferred.promise);
    };

    HttpClient.prototype.get = function(path, query) {
      return this.request("GET", path, query);
    };

    HttpClient.prototype.post = function(path, body) {
      return this.request("POST", path, null, body);
    };

    HttpClient.prototype.nextIndex = function() {
      this.n = (this.n + 1) % this.hostsLength;
      return this.n;
    };

    return HttpClient;

  })();

  module.exports = HttpClient;

}).call(this);
